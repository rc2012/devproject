source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
3
[1-10]
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
q()
install.packages("data.table")
fileUrl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
downloadfile(fileUrl,destfile="test.cvs")
download.file(fileUrl,destfile="test.cvs")
x<-fread("test.cvs")
library("data.table")
x<-fread("test.cvs")
head(x)
DT<-x
h<-tapply(DT$pwgtp15,DT$SEX,mean)
h
j<-DT[,mean(pwgtp15),by=SEX]
j
f<-mean(DT$pwgtp15,by=DT$SEX)
f
i<-sapply(split(DT$pwgtp15,DT$SEX),mean)
i
k<-mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
d<-rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rm(x)
d<-rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(DT[,mean(pwgtp15),by=SEX]
)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
q()
data(mtcars)
names(mtcars)
fit<-lim(mpg~ cyl +wt,data=mtcars)
fit<-lm(mpg~ cyl +wt,data=mtcars)
newdata<-data.frame(cyl=8,4)
newdata
y[1]=8
newdata<-data.frame(cyl=8:4)
newdata
p2 <- predict(fit, newdata, interval = ("prediction"))
swirl()
library(swirl)
install_from_swirl("Regression Models")
swirl()
6
dim(InsectSpray)
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays,classes)
sapply(InsectSprays,class)
lm(count,spray,data=InsectSprays)
fit<-lm(count~spray,data=InsectSprays)
summary(fit)
summary(fit)$coef
est<-x[,1]
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray-1,data=InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSpray$spray,C)
spray2<-relevel(InsectSprays$spray,C)
spray2<-relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray,data=spray2)
fit2<-lm(count~spray2,data=InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
cor(gpa_nor,gch_nor)
l_nor<-lm(gch_nor~gpa_nor)
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year,data=hunger)
summary(fit)$coef
lmF(Numeric~Year,data=hunger[hunger$Sex=="Female"])
lmF<-lm(Numeric~Year,data=hunger[hunger$Sex=="Female"])
?
)
lmF<-lm(hunger$Numeric[hunger$Sex=="Female"]~hunger$Year[hunber$Sex=="Female"],data=hunger)
lmF<-lm(hunger$Numeric[hunger$Sex=="Female"]~hunger$Year[hunger$Sex=="Female"],data=hunger)
lmM<-lm(hunger$Numeric[hunger$Sex=="Male"]~hunger$Year[hunger$Sex=="Male"],data=hunger)
lmBoth<-lm(Numeric~Year+Sex,data=hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,data=hunger)
summary(lmInter)
fit<-lm(y~x,out2)
plot(fit,which=1)
fitno<-lm(y~x,data=out2[-1,])
plot(fit,which=1)
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno<-out2[1,"y"]-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma<-i
sigma<-sqrt(deviance(fit)/df.residual(it))
sigma<-sqrt(deviance(fit)/df.residual(fit))
rstd<-sigma*sqrt(1-hatvalues(fit))
rstd<-resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1<-sqrt(deviance(fitno)/df.residual(fitno))
rstd<-sigma1*sqrt(1-hatvalues(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1])
)
head(rstudent(fit))
dy<-predict(fitno,out2)-predict(fit,out2)
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
data(mtcars)
fit<-lm(mpg~cyl+wt,data=mtcars)
summary(fit)
summary(fit)$coef
summary(fit)$coef[3,2]
summary(fit)$coef[3,1]
mtcars$cyl<- factor(mtcars$cyl)
fit<- lm(mpg~cyl+wt,mtcars)
summary(fit)$coef[3,1]
mtcars$cyl
summary(fit)$coef
fit2<-lm(mpg~cyl,mtcars)
summary(fit2)$coef
fit<-lm(mpg~factor(cyl)+wt,mtcars)
summary(fit)
fit2<-lm(mpg~factor(cyl)*wt,mtcars)
summary(fit2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
fit<-lm(mpg ~ I(wt) + factor(cyl), data = mtcars)
summary(fit)
summary(mtcars)
levels(mtcars)
<- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
fit<-lm(y~x)
q()
source('~/.active-rstudio-document', echo=TRUE)
library(manipulate)
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
myPlot()
myPlot(1)
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
q()
install.packages("rCharts")
install.packages("devgools")
install.packages("devtools")
require(devtools)
install.packages("Rtools")
q()
install.packages("devtools")
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
data(airquality)
d <- data.frame(airquality, stringsAsFactors = FALSE)print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
dTable(airquality, sPaginationType = "full_numbers")
airquality
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Main Panel text')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)  ),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})      }
)
data(Galton)
data(galton)
install.packages("UsingR")
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})      }
)
runApp()
runApp()
mean(galton$child)
runApp()
runApp()
q()
install.packages("shiny")
library(shiny)
best("MD","heart attack")
```
```
- Using publicly available statistics from Centers for Medicare and Medicaide Services
- Hospital rankings for 3 common outcomes are available: heart attack, heart failure and pneumonia
- Accessible and easy to use
Slide With Code
========================================================
For example the highest ranked hospital for treating heart attacks in the state of Maryland is:
```{r}
state="MD"
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
state="MD"
source('~/.active-rstudio-document', echo=TRUE)
outcome.of.care.measures <- read.csv("~/R/dev project/outcome-of-care-measures.csv", header=FALSE)
View(outcome.of.care.measures)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("C:/Users/Renata/Documents/R/dev project"")
source('~/.active-rstudio-document', echo=TRUE)
setwd("C:/Users/Renata/Documents/R/dev project")
setwd("C:/Users/Renata/Documents/R/dev project")
